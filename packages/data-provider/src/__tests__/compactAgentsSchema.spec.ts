import { parseCompactConvo } from '../parsers';
import {
  EModelEndpoint,
  ImageDetail,
  ReasoningEffort,
  ReasoningSummary,
  Verbosity,
} from '../schemas';

describe('compactAgentsSchema', () => {
  it('retains preset parameters when sanitizing agent payloads', () => {
    const conversation = {
      endpoint: EModelEndpoint.agents,
      spec: 'optimism_companion',
      model: 'deepseek-chat',
      modelLabel: 'OptimismAI',
      promptPrefix: 'Stay optimistic.',
      temperature: 0.75,
      top_p: 0.9,
      topP: 0.85,
      topK: 40,
      presence_penalty: 0.4,
      frequency_penalty: 0.2,
      resendFiles: true,
      imageDetail: ImageDetail.high,
      agent_id: 'agent-123',
      instructions: 'Be helpful and warm.',
      additional_instructions: 'Always greet the user.',
      iconURL: 'https://example.com/icon.png',
      greeting: 'Hello! How can I help?',
      maxContextTokens: 8192,
      max_tokens: 2048,
      maxOutputTokens: 1024,
      maxTokens: 4096,
      stop: ['###'],
      tools: ['retrieval'],
      web_search: true,
      thinking: true,
      thinkingBudget: 512,
      reasoning_effort: ReasoningEffort.medium,
      reasoning_summary: ReasoningSummary.auto,
      verbosity: Verbosity.medium,
      useResponsesApi: true,
      disableStreaming: true,
      promptCache: true,
      system: 'System prompt goes here.',
      artifacts: 'artifact-ref',
      append_current_datetime: true,
      fileTokenLimit: 5000,
      agentOptions: {
        agent: 'functions',
        model: 'gpt-4o-mini',
        temperature: 0.1,
        skipCompletion: false,
      },
      region: 'us-east-1',
      additionalModelRequestFields: { foo: 'bar' },
      stream: false,
    } as const;

    const sanitized = parseCompactConvo({
      endpoint: EModelEndpoint.agents,
      endpointType: EModelEndpoint.agents,
      conversation,
    });

    expect(sanitized).not.toBeNull();
    expect(sanitized).toMatchObject({
      spec: conversation.spec,
      model: conversation.model,
      modelLabel: conversation.modelLabel,
      promptPrefix: conversation.promptPrefix,
      temperature: conversation.temperature,
      top_p: conversation.top_p,
      topP: conversation.topP,
      topK: conversation.topK,
      presence_penalty: conversation.presence_penalty,
      frequency_penalty: conversation.frequency_penalty,
      web_search: conversation.web_search,
      thinking: conversation.thinking,
      thinkingBudget: conversation.thinkingBudget,
      reasoning_effort: conversation.reasoning_effort,
      reasoning_summary: conversation.reasoning_summary,
      verbosity: conversation.verbosity,
      useResponsesApi: conversation.useResponsesApi,
      disableStreaming: conversation.disableStreaming,
      promptCache: conversation.promptCache,
      system: conversation.system,
      artifacts: conversation.artifacts,
      append_current_datetime: conversation.append_current_datetime,
      fileTokenLimit: conversation.fileTokenLimit,
      agentOptions: conversation.agentOptions,
      region: conversation.region,
      additionalModelRequestFields: conversation.additionalModelRequestFields,
      stream: conversation.stream,
      instructions: conversation.instructions,
      additional_instructions: conversation.additional_instructions,
      iconURL: conversation.iconURL,
      greeting: conversation.greeting,
      stop: conversation.stop,
      tools: conversation.tools,
      imageDetail: conversation.imageDetail,
      resendFiles: conversation.resendFiles,
      maxContextTokens: conversation.maxContextTokens,
      max_tokens: conversation.max_tokens,
      maxOutputTokens: conversation.maxOutputTokens,
      maxTokens: conversation.maxTokens,
    });
  });
});
